<?php
/**
 * Sassify module for ProcessWire CMS
 * by Rudy Affandi (2016)
 * https://github.com/lesaff
 * MIT License
 */

require __DIR__ . '/vendor/autoload.php';

use Leafo\ScssPhp\Compiler;
use Leafo\ScssPhp\Server;
use Leafo\ScssPhp\Exception;

class Sassify extends WireData implements Module {
 
    // Init global configuration variables.
    private static $cacheFolder; 
    private static $cssFilename; 
    private static $cssFolder; 
    private static $cssPath; 
    private static $cssUrl; 
    private static $numberPrecision;
    private static $outputFormat;
    private static $sassFolder; 
    private static $templatePath; 


    /**
     * ------------------------------------------------------------------------
     * getModuleInfo is a module required by all modules to tell 
     * ProcessWire about them
     * ------------------------------------------------------------------------
     * @return array
     */
    public static function getModuleInfo() 
    {
        return [
            'title'    => "Sassify",
            'version'  => "0.0.4",
            'summary'  => "Compile SASS/SCSS/Compass and use it in your project.",
            'author'   => "Rudy Affandi",
            'href'     => "https://github.com/lesaff/ProcessWire-Sassify",
            'icon'     => "css3",
 
            // use autoload if module is to be called each load, if it is only needed to setup something set to false
            'autoload' => true,
            'singular' => true,
            'page' => [
                'name' => 'sassify',
                'parent' => 'setup',
                'title' => 'Sassify Settings',
            ],
            'requires' => "ProcessWire>=2.5",
        ];
    }

    
    /**
     * Initialize module
     */
    public function init() 
    {

        // Set module config
        self::$cssFilename     = wire('sanitizer')->name($this->css_filename);
        self::$cssFolder       = wire('sanitizer')->pageName($this->css_folder, true);
        self::$sassFolder      = wire('sanitizer')->pageName($this->sass_folder, true);
        self::$templatePath    = wire('config')->paths->templates;
        self::$cssPath         = wire('config')->paths->templates . self::$cssFolder . '/';
        self::$cssUrl          = wire('sanitizer')->pagePathName($this->css_url);
        self::$numberPrecision = intval($this->css_number_precision);
        self::$outputFormat    = $this->sass_formatter;

    }


    /**
     * Process css, scss and sass and compile result
     *
     * @param      string  $stylesheets  The stylesheets
     *
     * @return     string  ( description_of_the_return_value )
     */
    public static function css($stylesheets)
    {
    	
        /**
         * Only compile when there's changes
         * 
         * Added per 
         * https://processwire.com/talk/topic/14297-announcing-sassify/?do=findComment&comment=128708
         * 
         */

        // get timestamp of most recently modified SCSS file
        $files = glob( self::$templatePath . 'sass/*.scss' );

        $times = array_map('filemtime', $files);

        arsort($times);
        $scss_time = current($times);

        // get timestamp of CSS file
        $css_file = self::$cssPath . self::$cssFilename . '.css';

        if (file_exists($css_file)) {
            $css_time = filemtime($css_file);
        }

        // if no CSS file or SCSS newer than CSS file...
        if( !isset($css_time) || $scss_time > $css_time ) {

            // Initialize compiler
            $scss = new Compiler();

            // Set output format
            $scss->setFormatter(self::$outputFormat);

            // Set number precision
            $scss->setNumberPrecision(self::$numberPrecision);

            // Iterate each stylesheet
            if (! is_array($stylesheets)) {
                $imports[] = '@import "' . self::$templatePath . $stylesheets . '"';
            }

            foreach ($stylesheets as $stylesheet) {
                $imports[] = '@import "' . self::$templatePath . $files . '"';
            }

            // Compile it
            try {
                $compiled = $scss->compile(implode(';', $imports));
            } catch(Exception $e) {
                $this->error('Sassify Error: ' . $e);
            }

            // Save to template/styles
            file_put_contents(self::$cssPath . self::$cssFilename . '.css', $compiled);

            // Return saved file path
            return self::$cssUrl . self::$cssFilename . '.css?' . $scss_time;
        } else {
            // Return saved file path
            return self::$cssUrl . self::$cssFilename . '.css?' . $css_time;
        }

    }


    /**
     * Construct
     * 
     */
    public function __construct()
    {

    }


    /**
     * Create the cache folder in the Assets folder at module installation.
     * 
     */
    public function ___install()
    {

    }

    /**
     * Remove the cache folder in the Assets folder at module uninstallation.
     * 
     */
    public function ___uninstall()
    {

    }

}